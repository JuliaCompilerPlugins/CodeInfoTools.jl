var documenterSearchIndex = {"docs":
[{"location":"#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Below is the API documentation for CodeInfoTools.jl","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"CurrentModule = CodeInfoTools","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"code_info\nPipe\nrenumber\nrenumber!\nfinish","category":"page"},{"location":"#CodeInfoTools.code_info","page":"API Documentation","title":"CodeInfoTools.code_info","text":"code_info(f, tt; generate = true, debuginfo = :default)\n\nReturn lowered code for function f with tuple type tt. Equivalent to InteractiveUtils.@code_lowered – but a function call and requires a tuple type tt as input.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.Pipe","page":"API Documentation","title":"CodeInfoTools.Pipe","text":"Pipe(ir)\n\nA wrapper around a Canvas object – allow incremental construction of CodeInfo. Call finish when done to produce a new CodeInfo instance.\n\nIn general, it is not efficient to insert statements onto your working Canvas; only appending is fast, for the same reason as with Vectors. For this reason, the Pipe construct makes it convenient to incrementally build a Canvas fragment from a piece of CodeInfo, making efficient modifications as you go. The general pattern looks like:\n\npr = CodeInfoTools.Pipe(ir)\nfor (v, st) in pr\n  # do stuff\nend\nir = CodeInfoTools.finish(pr)\n\nIn the loop, inserting and deleting statements in pr around v is efficient.\n\n\n\n\n\n","category":"type"},{"location":"#CodeInfoTools.renumber","page":"API Documentation","title":"CodeInfoTools.renumber","text":"renumber(c::Canvas)\n\nCreate a new Canvas instance with SSA values re-numbered and ordered linearly from `c.defs).\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.renumber!","page":"API Documentation","title":"CodeInfoTools.renumber!","text":"renumber!(c::Canvas)\n\nIn place version of renumber.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.finish","page":"API Documentation","title":"CodeInfoTools.finish","text":"finish(p::Pipe)\n\nCreate a new CodeInfo instance from a Pipe. Renumbers the wrapped Canvas in-place – then copies information from the original CodeInfo instance and inserts modifications from the wrapped Canvas.\n\n\n\n\n\n","category":"function"}]
}
