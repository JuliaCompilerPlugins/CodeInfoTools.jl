var documenterSearchIndex = {"docs":
[{"location":"#API-Documentation","page":"API Documentation","title":"API Documentation","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Below is the API documentation for CodeInfoTools.jl","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"CurrentModule = CodeInfoTools","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"code_info\nBuilder\nprepare_builder!\ngetindex\niterate\ncircshift!\nbump!\nslump!\npush!\npushfirst!\ninsert!\nreplace!\ndeleteat!\npushslot!\nfinish","category":"page"},{"location":"#CodeInfoTools.code_info","page":"API Documentation","title":"CodeInfoTools.code_info","text":"code_info(f, tt; generate = true, debuginfo = :default)\n\nReturn lowered code for function f with tuple type tt. Equivalent to InteractiveUtils.@code_lowered – but a function call and requires a tuple type tt as input.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.Builder","page":"API Documentation","title":"CodeInfoTools.Builder","text":"struct Builder\n    ref::CodeInfo\n    code::Vector{Any}\n    nargs::Int32\n    codelocs::Vector{Int32}\n    newslots::Dict{Int,Symbol}\n    slotnames::Vector{Symbol}\n    slotmap::Vector{Int}\nend\n\nBuilder(ci::CodeInfo, nargs::Int; prepare=true)\n\nAn immutable wrapper around CodeInfo which allows a user to insert statements, change SSA values, insert Core.SlotNumber instances, etc – without effecting the wrapped CodeInfo instance. \n\nCall finish(b::Builder) to produce a modified instance of CodeInfo.\n\n\n\n\n\n","category":"type"},{"location":"#CodeInfoTools.prepare_builder!","page":"API Documentation","title":"CodeInfoTools.prepare_builder!","text":"prepare_builder!(b::Builder)\n\nIterate over the reference CodeInfo instance in b.ref – pushing Expr instances and nodes onto the builder b. This function is called during Builder construction so that the user is presented with a copy of the CodeInfo in b.ref.\n\n\n\n\n\n","category":"function"},{"location":"#Base.getindex","page":"API Documentation","title":"Base.getindex","text":"getindex(b::Builder, i::Int)\ngetindex(b::Builder, i::Core.SSAValue)\n\nReturn the expression/node at index i from the Vector of lowered code statements.\n\n\n\n\n\n","category":"function"},{"location":"#Base.iterate","page":"API Documentation","title":"Base.iterate","text":"iterate(b::Builder, (ks, i) = (1 : length(b.code), 1))\n\nIterate over the builder – generating a tuple (Core.SSAValue(k), stmt) at each iteration step, where k is an index and stmt is a node or Expr instance.\n\n\n\n\n\n","category":"function"},{"location":"#Base.circshift!","page":"API Documentation","title":"Base.circshift!","text":"circshift!(b::Builder, deg::Int; ch = r -> true, slots::Bool = false)\n\nShift either SSA values (slots = false) or the Core.SlotNumber instances (slots = true) by deg. The Boolean function ch determines which subset of values are shifted and can be customized by the user.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.bump!","page":"API Documentation","title":"CodeInfoTools.bump!","text":"bump!(b::Builder, v::Int; slots = false)\n\nSubsets all instances of Core.SSAValue or Core.SlotNumber greater than v and shifts them up by 1. Convenience form of circshift!.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.slump!","page":"API Documentation","title":"CodeInfoTools.slump!","text":"slump!(b::Builder, v::Int; slots = false)\n\nSubsets all instances of Core.SSAValue or Core.SlotNumber greater than v and shifts them down by 1. Convenience form of circshift!.\n\n\n\n\n\n","category":"function"},{"location":"#Base.push!","page":"API Documentation","title":"Base.push!","text":"push!(b::Builder, stmt)\n\nPush a statement to the end of b.code.\n\n\n\n\n\n","category":"function"},{"location":"#Base.pushfirst!","page":"API Documentation","title":"Base.pushfirst!","text":"pushfirst!(b::Builder, stmt)\n\nPush a statement to the head of b.code. This call first shifts all SSA values up by 1 to preserve ordering.\n\n\n\n\n\n","category":"function"},{"location":"#Base.insert!","page":"API Documentation","title":"Base.insert!","text":"insert!(b::Builder, v::Int, stmt)\ninsert!(b::Builder, v::Core.SSAValue, stmt)\n\nInsert an Expr or node stmt at location v in b.code. Shifts all SSA values with id >= v to preserve order.\n\n\n\n\n\n","category":"function"},{"location":"#Base.replace!","page":"API Documentation","title":"Base.replace!","text":"replace!(b::Builder, v::Int, stmt)\nreplace!(b::Builder, v::Core.SSAValue, stmt)\n\nReplace the Expr or node at location v with stmt.\n\n\n\n\n\n","category":"function"},{"location":"#Base.deleteat!","page":"API Documentation","title":"Base.deleteat!","text":"deleteat!(b::Builder, v::Int)\ndeleteat!(b::Builder, v::Core.SSAValue)\n\nDelete the expression or node at location v. If v indexes a Core.NewvarNode (which indicates a slot), the slotname is also removed from b.slotnames. All SSA values and slots are shifted down accordingly.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.pushslot!","page":"API Documentation","title":"CodeInfoTools.pushslot!","text":"pushslot!(b::Builder, slot::Symbol)\n\nInsert a new slot into the IR with name slot. Increments all SSA value instances to preserve the correct ordering.\n\n\n\n\n\n","category":"function"},{"location":"#CodeInfoTools.finish","page":"API Documentation","title":"CodeInfoTools.finish","text":"finish(b::Builder)\n\nProduce a new CodeInfo instance from a Builder instance b.\n\n\n\n\n\n","category":"function"}]
}
